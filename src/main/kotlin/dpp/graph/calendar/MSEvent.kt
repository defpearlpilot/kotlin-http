package dpp.graph.calendar

import com.github.kittinunf.fuel.core.ResponseDeserializable
import com.google.gson.*
import com.google.gson.annotations.JsonAdapter
import java.lang.reflect.Type
import java.time.LocalDateTime
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter


/*
{"@odata.context":"https://graph.microsoft.com/v1.0/$metadata#users('bruce%40designitcontoso.onmicrosoft.com')/events",
"@odata.nextLink":"https://graph.microsoft.com/v1.0/users/bruce@designitcontoso.onmicrosoft.com/events?$skip=10",
"value":[
{
"@odata.etag":"W/\"qFEZLMGCQk2tqBGxsbZoNwAAG00Olg==\"",
"id":"AAMkADEyZWVmODI5LTQxYmYtNDI0MS1hZWFjLTYxZjc1ZDQ4ZmQwNwBGAAAAAACNcZxZz2UxT6DuSC4yUmLIBwCoURkswYJCTa2oEbGxtmg3AAAAAAENAACoURkswYJCTa2oEbGxtmg3AAAbSc2hAAA=",
"createdDateTime":"2017-07-10T18:34:58.952401Z",
"lastModifiedDateTime":"2017-07-10T18:35:05.3899152Z",
"changeKey":"qFEZLMGCQk2tqBGxsbZoNwAAG00Olg==",
"categories":[],
"originalStartTimeZone":"UTC",
"originalEndTimeZone":"UTC",
"iCalUId":"040000008200E00074C5B7101A82E008000000002A480F3CABF9D201000000000000000010000000E4C033215C9C9A4A8D8087633F6D598C",
"reminderMinutesBeforeStart":15,
"isReminderOn":true,
"hasAttachments":false,
"subject":"helper made!!",
"bodyPreview":"This meeting was auto-generated by BookIt",
"importance":"normal",
"sensitivity":"normal",
"isAllDay":false,
"isCancelled":false,
"isOrganizer":true,
"responseRequested":true,
"seriesMasterId":null,
"showAs":"busy",
"type":"singleInstance",
"webLink":"https://outlook.office365.com/owa/?itemid=AAMkADEyZWVmODI5LTQxYmYtNDI0MS1hZWFjLTYxZjc1ZDQ4ZmQwNwBGAAAAAACNcZxZz2UxT6DuSC4yUmLIBwCoURkswYJCTa2oEbGxtmg3AAAAAAENAACoURkswYJCTa2oEbGxtmg3AAAbSc2hAAA%3D&exvsurl=1&path=/calendar/item",
"onlineMeetingUrl":null,
"responseStatus":{"response":"organizer","time":"0001-01-01T00:00:00Z"},
"body":{"contentType":"html","content":"<html><head><meta name=\"Generator\" content=\"Microsoft Exchange Server\">\r\n<!-- converted from text -->\r\n<style><!-- .EmailQuote { margin-left: 1pt; padding-left: 4pt; border-left: #800000 2px solid; } --></style></head>\r\n<body>\r\n<font size=\"2\"><span style=\"font-size:10pt;\"><div class=\"PlainText\">This meeting was auto-generated by BookIt</div></span></font>\r\n</body>\r\n</html>\r\n"},
"start":{"dateTime":"2017-08-05T04:01:00.0000000","timeZone":"UTC"},
"end":{"dateTime":"2017-08-05T04:11:00.0000000","timeZone":"UTC"},
"location":{"displayName":"Red"},
"recurrence":null,
"attendees":[
{
"type":"required",
"status":{"response":"declined","time":"2017-07-10T18:35:03.8368846Z"},
"emailAddress":{"name":"Red","address":"red-room@designitcontoso.onmicrosoft.com"}}
],
"organizer":{"emailAddress":{"name":"Bruce Springsteen","address":"bruce@designitcontoso.onmicrosoft.com"}}}
 */

object LocalDateTimeCodec : JsonSerializer<LocalDateTime>, JsonDeserializer<LocalDateTime> {
  override fun serialize(src: LocalDateTime?, typeOfSrc: Type?, context: JsonSerializationContext?): JsonElement
  {
    val formatted = src?.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) ?: "null"
    println("Serialized $formatted")
    return JsonPrimitive(formatted)
  }

  override fun deserialize(json: JsonElement?, typeOfT: Type?, context: JsonDeserializationContext?): LocalDateTime?
  {
    println("Deserialized $json")
    return when(json) {
      null -> null
      else -> {

        val src = LocalDateTime.parse(json.asJsonPrimitive.asString)
        val formatted = src.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) ?: "null"
        println("Reified $formatted")
        src
      }
    }
  }
}


object ZonedDateTimeCodec : JsonSerializer<ZonedDateTime>, JsonDeserializer<ZonedDateTime> {
  override fun serialize(src: ZonedDateTime?, typeOfSrc: Type?, context: JsonSerializationContext?): JsonElement
  {
    val formatted = src?.format(DateTimeFormatter.ofPattern("YYYY-MM-DD")) ?: "null"
    println("Serialized $formatted")
    return JsonPrimitive(formatted)
  }

  override fun deserialize(json: JsonElement?, typeOfT: Type?, context: JsonDeserializationContext?): ZonedDateTime?
  {
    println("Deserialized $json")
    return when(json) {
      null -> null
      else -> ZonedDateTime.parse(json.asJsonPrimitive.asString)
    }
  }
}


var gson = GsonBuilder()
    .registerTypeAdapter(ZonedDateTime::class.java, ZonedDateTimeCodec)
    .registerTypeAdapter(LocalDateTime::class.java, LocalDateTimeCodec)
    .create()


data class MSEmail(val name: String, val address: String)

data class MSAttendee(val emailAddress: MSEmail)

data class MSZonedDateTime(@JsonAdapter(LocalDateTimeCodec::class) val dateTime: LocalDateTime,
                           val timeZone: String)

data class MSEvent(val id: String,
                   val subject: String,
                   val bodyPreview: String,
                   val displayName: String,
                   @JsonAdapter(ZonedDateTimeCodec::class) val createdDateTime: ZonedDateTime,
                   val organizer: MSAttendee,
                   val attendees: List<MSAttendee>,
                   val start: MSZonedDateTime,
                   val end: MSZonedDateTime
                  )
{
  class Deserializer : ResponseDeserializable<MSEvent>
  {
    override fun deserialize(content: String) = gson.fromJson(content, MSEvent::class.java)
  }
}


class MSEventResponse(val value: List<MSEvent>)
{
  class Deserializer : ResponseDeserializable<MSEventResponse>
  {
    override fun deserialize(content: String) = gson.fromJson(content, MSEventResponse::class.java)
  }
}


